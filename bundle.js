(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var img = new Image();

img.src = './styled.jpg';
img.onload = function () {
  var width = img.width;
  var height = img.height;

  var canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  document.body.appendChild(canvas);

  var context = canvas.getContext('2d');

  context.drawImage(img, 0, 0, width, height);

  var imageData = canvas.getContext('2d').getImageData(0, 0, width, height);
  var pixelData = imageData.data;

  var lumi = [0.2126, 0.7152, 0.0722];

  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var i = (y * width + x) * 4;

      var r = pixelData[i + 0];
      var g = pixelData[i + 1];
      var b = pixelData[i + 2];

      var l = parseInt(r * lumi[0]) + parseInt(g * lumi[1]) + parseInt(b * lumi[2]);

      imageData.data[i + 0] = imageData.data[i + 1] = imageData.data[i + 2] = l;
    }
  }

  context.putImageData(imageData, 0, 0);

  var vectorField = [];
  var step = 16;
  for (var _y = step / 2; _y < height - step / 2; _y += step) {
    for (var _x = step / 2; _x < width - step / 2; _x += step) {
      var _i = (_y * width + _x) * 4;

      var _r = imageData.data[_i + 0];
      var _g = imageData.data[_i + 1];
      var _b = imageData.data[_i + 2];

      var _l = parseInt(_r * lumi[0]) + parseInt(_g * lumi[1]) + parseInt(_b * lumi[2]);

      var minIdx = -1;
      var minVal = 255;
      var pos = { x: 0, y: 0 };
      for (var y_ = _y - step / 2; y_ < _y + step / 2; y_++) {
        for (var x_ = _x - step / 2; x_ < _x + step / 2; x_++) {
          var i_ = (y_ * width + x_) * 4;

          if (i_ == _i) continue;

          _r = imageData.data[i_ + 0];
          _g = imageData.data[i_ + 1];
          _b = imageData.data[i_ + 2];

          var l_ = parseInt(_r * lumi[0]) + parseInt(_g * lumi[1]) + parseInt(_b * lumi[2]);

          var v = Math.sqrt(Math.pow(l_ - _l, 2));

          if (v < minVal) {
            minVal = v;
            minIdx = i_;
            pos.x = x_;
            pos.y = y_;
          }
        }
      }

      vectorField.push({
        start: { x: _x, y: _y },
        end: { x: pos.x, y: pos.y }
      });

      context.strokeStyle = '#f00';
      context.beginPath();
      context.moveTo(_x, _y);
      context.lineTo(pos.x, pos.y);
      context.closePath();
      context.stroke();
    }
  }

  var Particle = function () {
    function Particle(x, y) {
      _classCallCheck(this, Particle);

      this.x = x;
      this.y = y;
      this.vel = [0, 0];
      this.acc = [0, 0];
    }

    _createClass(Particle, [{
      key: 'update',
      value: function update() {
        this.vel[0] += this.acc[0];
        this.vel[1] += this.acc[1];

        this.x += this.vel[0];
        this.y += this.vel[1];

        this.acc[0] = 0;
        this.acc[1] = 0;
      }
    }, {
      key: 'draw',
      value: function draw() {
        context.fillStyle = '#0f0';
        context.beginPath();
        context.ellipse(this.x, this.y, 2, 2, 0, 0, 2 * Math.PI);
        context.closePath();
        context.fill();
      }
    }]);

    return Particle;
  }();

  var particles = [];
  function render(t) {
    context.fillRect(0, 0, width, height);
    context.putImageData(imageData, 0, 0);

    particles.forEach(function (particle) {
      var w = parseInt(width / step);
      var x_ = parseInt((particle.x - step / 2) / step);
      var y_ = parseInt((particle.y - step / 2) / step);

      var _vectorField = vectorField[y_ * w + x_],
          start = _vectorField.start,
          end = _vectorField.end;

      context.fillStyle = '#f00';
      context.fillRect(start.x, start.y, step, step);

      var len = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));

      particle.vel[0] = (end.x - start.x) / len * 0.1;
      particle.vel[1] = (end.y - start.y) / len * 0.1;

      particle.update();
      particle.draw();
    });
    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);

  window.addEventListener('click', function (e) {
    var x = e.clientX;
    var y = e.clientY;
    particles.push(new Particle(x, y));
  });
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
